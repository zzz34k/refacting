2016-09-11
定义：
重构（名词）：对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。
重构（动词）：使用一系列重构手段，在不改变软件可观察行为的前提下，调整期结构。

他提供了一种更高效受控的技术来整理代码

“两顶帽子”的比喻：添加新功能和重构
添加新功能时，你不应该修改既有代码，只管添加新功能。通过测试（并让测试正常运行），你可以衡量自己的工作进度。
重构时你就不能再添加功能，只管改进程序结构。此时你不应该添加任何测试（除非发现有先前以后的东西），只在绝对必要（用以处理接口变化）时才修改测试。

重构的目的：
重构改进软件设计：改进设计的一个重要方向就是消除重复代码
重构使软件更容易理解:一开始我所做的重构都像这样停留在细枝末节上。随着代码渐趋简洁，我发现自己可以看到一些以前看不到的设计层面的东西。如果不对代码做这些修改，也许我永远看不见它们，因为我的聪明才智不足以在脑子里把这一切都想象出来。

Ralph Johnson把这种“早期重构”描述为“擦掉窗户上的污垢，是你看的更远".

重构提高编程速度:

何时重构：重构本身就不是意见应该特别拨出时间做的事情，重构应该随时随地进行。你不应该为重构而重构，你之所以重构，是因为你想做别的什么事，而重构可以帮助你把那些事做好。

1.三次法则[Don Roberts]：第一次做某件事时只管去做；第二次做类似的事会产生反感，但无论如何还是可以去做；第三次再做类似的事，你就应该重构。
	事不过三，三则重构
2.添加功能时重构	
3.修补错误时重构

是什么让程序如此难以相与？有四个原因：
1. 难以阅读的程序，难以修改
2. 逻辑重复的程序，难以修改
3. 添加新行为时需要修改已有代码的程序，难以修改
4. 带复杂条件逻辑的程序，难以修改

我们希望程序：
1. 容易阅读
2. 所有逻辑都只在唯一地点指定
3. 新的改动不会危及现有行为
4. 尽可能简单表达条件逻辑

预先设计风格：许多人豆包设计看作软件开发的关键环节，而把编程看作只是机械式的低级劳动

从我们的经验看来，没有任何量度规矩比得上一个见识广博的直觉。

你必须培养出自己的判断力，学会判断一个类内有多少实例变量算是太大，一个函数内有多少行代码才算太长。

###
书还没看完，我已经被书中的内容和作者的知识渊博给折服，Martin Fowler不愧为IT界一个人才，每字每句都渗透着哲学的道理
###
